<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32L0_BMA253\STM32L0_BMA253.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32L0_BMA253\STM32L0_BMA253.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Wed Jun 15 23:01:44 2022
<BR><P>
<H3>Maximum Stack Usage =        288 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; STEP_TaskStep &rArr; ReadFifoData &rArr; accelerometer_fifo_data_read &rArr; BMA253_ReadNBytes &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[35]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[16]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ADC1_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[13]">DMA1_Channel1_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[14]">DMA1_Channel2_3_IRQHandler</a> from stm32l0xx_it.o(i.DMA1_Channel2_3_IRQHandler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[15]">DMA1_Channel4_5_IRQHandler</a> from stm32l0xx_it.o(i.DMA1_Channel4_5_IRQHandler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[10]">EXTI0_1_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[11]">EXTI2_3_IRQHandler</a> from stm32l0xx_it.o(i.EXTI2_3_IRQHandler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[12]">EXTI4_15_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from stm32l0xx_it.o(i.HardFault_Handler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[1a]">I2C1_IRQHandler</a> from stm32l0xx_it.o(i.I2C1_IRQHandler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[17]">LPTIM1_IRQHandler</a> from stm32l0xx_it.o(i.LPTIM1_IRQHandler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[1d]">LPUART1_IRQHandler</a> from stm32l0xx_it.o(i.LPUART1_IRQHandler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from stm32l0xx_it.o(i.NMI_Handler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from stm32l0xx_it.o(i.PendSV_Handler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[1b]">SPI1_IRQHandler</a> from stm32l0xx_it.o(i.SPI1_IRQHandler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from stm32l0xx_it.o(i.SVC_Handler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from stm32l0xx_it.o(i.SysTick_Handler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[1e]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l010x4.o(.text)
 <LI><a href="#[19]">TIM21_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[18]">TIM2_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[1c]">USART2_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[20]">__main</a> from __main.o(!!!main) referenced from startup_stm32l010x4.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[21]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[23]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a4]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a5]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[24]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[a6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[28]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a7]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[af]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[bc]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[bd]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[be]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[bf]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[c0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[c1]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[c2]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[22]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[c3]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[25]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[27]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c4]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[29]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; STEP_TaskStep &rArr; ReadFifoData &rArr; accelerometer_fifo_data_read &rArr; BMA253_ReadNBytes &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c5]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[37]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[c6]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_map_to_pin1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_enable
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32l010x4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_Init
</UL>

<P><STRONG><a name="[c8]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
</UL>

<P><STRONG><a name="[31]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[30]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_TaskStepInit
</UL>

<P><STRONG><a name="[c9]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_TaskStepInit
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_number
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelFilter
</UL>

<P><STRONG><a name="[cd]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2b]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d0]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d1]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[d2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>ACC_PRINTF_GetData</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, print.o(i.ACC_PRINTF_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ACC_PRINTF_GetData &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_accel_get
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set1sFlag
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get1sFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>BMA253_I2cInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bma253_iic.o(i.BMA253_I2cInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BMA253_I2cInit &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_Init
</UL>

<P><STRONG><a name="[43]"></a>BMA253_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bma253.o(i.BMA253_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = BMA253_Init &rArr; BMA253_SetParameter &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_I2cInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>BMA253_ReadByte</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, bma253_iic.o(i.BMA253_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetTransferSize
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetTransferRequest
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
</UL>

<P><STRONG><a name="[49]"></a>BMA253_ReadNBytes</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, bma253_iic.o(i.BMA253_ReadNBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = BMA253_ReadNBytes &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetTransferSize
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetTransferRequest
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_fifo_data_read
</UL>

<P><STRONG><a name="[61]"></a>BMA253_WriteByte</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, bma253_iic.o(i.BMA253_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BMA253_WriteByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetTransferSize
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetTransferRequest
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_write_byte
</UL>

<P><STRONG><a name="[14]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.DMA1_Channel2_3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.DMA1_Channel4_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_SetGsensorIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>Get1sFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, common.o(i.Get1sFlag))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_PRINTF_GetData
</UL>

<P><STRONG><a name="[9b]"></a>Get32HzFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, common.o(i.Get32HzFlag))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepClearCountdown
</UL>

<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.I2C1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>LL_EXTI_Init</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32l0xx_ll_exti.o(i.LL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[82]"></a>LL_GPIO_Init</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, stm32l0xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[83]"></a>LL_I2C_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32l0xx_ll_i2c.o(i.LL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[68]"></a>LL_Init1msTick</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l0xx_ll_utils.o(i.LL_Init1msTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_Init1msTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[6b]"></a>LL_LPTIM_DeInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l0xx_ll_lptim.o(i.LL_LPTIM_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPTIM_Disable
</UL>

<P><STRONG><a name="[6a]"></a>LL_LPTIM_Disable</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, stm32l0xx_ll_lptim.o(i.LL_LPTIM_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_LPTIM_Disable &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPTIM_DeInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetLPTIMClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepClearCountdown
</UL>

<P><STRONG><a name="[6e]"></a>LL_LPUART_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32l0xx_ll_lpuart.o(i.LL_LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_LPUART_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[6f]"></a>LL_RCC_GetLPUARTClockFreq</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32l0xx_ll_rcc.o(i.LL_RCC_GetLPUARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_RCC_GetLPUARTClockFreq &rArr; RCC_GetSystemClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_HSIDIV
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_Init
</UL>

<P><STRONG><a name="[6c]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32l0xx_ll_rcc.o(i.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPTIM_Disable
</UL>

<P><STRONG><a name="[76]"></a>LL_RTC_DATE_Init</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_DATE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_RTC_DATE_Init &rArr; LL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[77]"></a>LL_RTC_EnterInitMode</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[7a]"></a>LL_RTC_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_RTC_Init &rArr; LL_RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[7b]"></a>LL_RTC_TIME_Init</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_TIME_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_RTC_TIME_Init &rArr; LL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[79]"></a>LL_RTC_WaitForSynchro</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[9a]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_ll_utils.o(i.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[48]"></a>LL_mDelay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l0xx_ll_utils.o(i.LL_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_power_mode_set
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_power_mode_get
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_WriteByte
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadNBytes
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadByte
</UL>

<P><STRONG><a name="[96]"></a>LPTIM1_CounterStartIT</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, common.o(i.LPTIM1_CounterStartIT))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploadPedometer
</UL>

<P><STRONG><a name="[17]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.LPTIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPTIM1_IRQHandler &rArr; LPTIM1_IsrHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM1_IsrHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>LPTIM1_IsrHandle</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, common.o(i.LPTIM1_IsrHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPTIM1_IsrHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM1_IRQHandler
</UL>

<P><STRONG><a name="[1d]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.LPUART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>MX_GPIO_Init</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MX_GPIO_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[42]"></a>MX_I2C1_Init</STRONG> (Thumb, 192 bytes, Stack size 80 bytes, i2c.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_I2C1_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_I2cInit
</UL>

<P><STRONG><a name="[95]"></a>MX_LPTIM1_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lptim.o(i.MX_LPTIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_LPTIM1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploadPedometer
</UL>

<P><STRONG><a name="[84]"></a>MX_LPUART1_UART_Init</STRONG> (Thumb, 314 bytes, Stack size 72 bytes, usart.o(i.MX_LPUART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_LPUART1_UART_Init &rArr; LL_LPUART_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[8d]"></a>MX_RTC_Init</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_RTC_Init &rArr; LL_RTC_TIME_Init &rArr; LL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>STEP_SetGsensorIntFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, step_process.o(i.STEP_SetGsensorIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>STEP_TaskStep</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, step_process.o(i.STEP_TaskStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = STEP_TaskStep &rArr; ReadFifoData &rArr; accelerometer_fifo_data_read &rArr; BMA253_ReadNBytes &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_rst_intr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploadPedometer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepClearCountdown
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFifoData
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>STEP_TaskStepInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, step_process.o(i.STEP_TaskStepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STEP_TaskStepInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>Set1sFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, common.o(i.Set1sFlag))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_PRINTF_GetData
</UL>

<P><STRONG><a name="[9c]"></a>Set32HzFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, common.o(i.Set32HzFlag))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStepClearCountdown
</UL>

<P><STRONG><a name="[94]"></a>SysInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, common.o(i.SysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SysInit &rArr; MX_LPUART1_UART_Init &rArr; LL_LPUART_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPTIM1_Init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM1_CounterStartIT
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>SystemClock_Config</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemClock_Config &rArr; LL_Init1msTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bma253.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_power_mode_set
</UL>

<P><STRONG><a name="[3b]"></a>accelerometer_accel_get</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bma253.o(i.accelerometer_accel_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = accelerometer_accel_get &rArr; bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_PRINTF_GetData
</UL>

<P><STRONG><a name="[8f]"></a>accelerometer_fifo_data_read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bma253.o(i.accelerometer_fifo_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = accelerometer_fifo_data_read &rArr; BMA253_ReadNBytes &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadNBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFifoData
</UL>

<P><STRONG><a name="[58]"></a>accelerometer_fifo_mode_get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bma253.o(i.accelerometer_fifo_mode_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = accelerometer_fifo_mode_get &rArr; bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[57]"></a>accelerometer_fifo_mode_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bma253.o(i.accelerometer_fifo_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = accelerometer_fifo_mode_set &rArr; bma253_write_byte &rArr; BMA253_WriteByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[5a]"></a>accelerometer_fifo_watermark_level_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bma253.o(i.accelerometer_fifo_watermark_level_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = accelerometer_fifo_watermark_level_get &rArr; bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[59]"></a>accelerometer_fifo_watermark_level_set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bma253.o(i.accelerometer_fifo_watermark_level_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = accelerometer_fifo_watermark_level_set &rArr; bma253_write_byte &rArr; BMA253_WriteByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[4f]"></a>accelerometer_filter_bandwidth_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bma253.o(i.accelerometer_filter_bandwidth_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = accelerometer_filter_bandwidth_get &rArr; bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[4e]"></a>accelerometer_filter_bandwidth_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bma253.o(i.accelerometer_filter_bandwidth_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = accelerometer_filter_bandwidth_set &rArr; bma253_write_byte &rArr; BMA253_WriteByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[5e]"></a>accelerometer_get_sleep_durn</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bma253.o(i.accelerometer_get_sleep_durn))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = accelerometer_get_sleep_durn &rArr; bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[60]"></a>accelerometer_get_sleep_timer_mode</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bma253.o(i.accelerometer_get_sleep_timer_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = accelerometer_get_sleep_timer_mode &rArr; bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[5b]"></a>accelerometer_int_enable</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, bma253.o(i.accelerometer_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = accelerometer_int_enable &rArr; bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_write_byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[5c]"></a>accelerometer_int_map_to_pin1</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, bma253.o(i.accelerometer_int_map_to_pin1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = accelerometer_int_map_to_pin1 &rArr; bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_write_byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[54]"></a>accelerometer_int_mode_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bma253.o(i.accelerometer_int_mode_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = accelerometer_int_mode_get &rArr; bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[53]"></a>accelerometer_int_mode_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bma253.o(i.accelerometer_int_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = accelerometer_int_mode_set &rArr; bma253_write_byte &rArr; BMA253_WriteByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[50]"></a>accelerometer_int_out_ctrl</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bma253.o(i.accelerometer_int_out_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = accelerometer_int_out_ctrl &rArr; bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_write_byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[51]"></a>accelerometer_int_out_ctrl_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bma253.o(i.accelerometer_int_out_ctrl_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = accelerometer_int_out_ctrl_get &rArr; bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[4d]"></a>accelerometer_power_mode_get</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, bma253.o(i.accelerometer_power_mode_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = accelerometer_power_mode_get &rArr; bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[4c]"></a>accelerometer_power_mode_set</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, bma253.o(i.accelerometer_power_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = accelerometer_power_mode_set &rArr; bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_write_byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[4b]"></a>accelerometer_probe</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bma253.o(i.accelerometer_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = accelerometer_probe &rArr; bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[56]"></a>accelerometer_range_get</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bma253.o(i.accelerometer_range_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = accelerometer_range_get &rArr; bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[55]"></a>accelerometer_range_set</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bma253.o(i.accelerometer_range_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = accelerometer_range_set &rArr; bma253_write_byte &rArr; BMA253_WriteByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[52]"></a>accelerometer_rst_intr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bma253.o(i.accelerometer_rst_intr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = accelerometer_rst_intr &rArr; bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_write_byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_TaskStep
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[5d]"></a>accelerometer_set_sleep_durn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bma253.o(i.accelerometer_set_sleep_durn))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = accelerometer_set_sleep_durn &rArr; bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_write_byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[5f]"></a>accelerometer_set_sleep_timer_mode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bma253.o(i.accelerometer_set_sleep_timer_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = accelerometer_set_sleep_timer_mode &rArr; bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_write_byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[4a]"></a>accelerometer_soft_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bma253.o(i.accelerometer_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = accelerometer_soft_reset &rArr; bma253_write_byte &rArr; BMA253_WriteByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bma253_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
</UL>

<P><STRONG><a name="[2a]"></a>main</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = main &rArr; STEP_TaskStep &rArr; ReadFifoData &rArr; accelerometer_fifo_data_read &rArr; BMA253_ReadNBytes &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_TaskStepInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_TaskStep
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_PRINTF_GetData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a2]"></a>tiny_vsnprintf_like</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, tiny_vsnprintf.o(i.tiny_vsnprintf_like))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tiny_vsnprintf_like &rArr; ee_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_number
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>

<P><STRONG><a name="[97]"></a>vcom_Init</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, vcom.o(i.vcom_Init))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[98]"></a>vcom_ReceiveInit</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, vcom.o(i.vcom_ReceiveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vcom_ReceiveInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[3c]"></a>vcom_Send</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, vcom.o(i.vcom_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_PRINTF_GetData
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_SetParameter
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadNBytes
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UploadPedometer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFifoData
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[80]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpio.o(i.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[87]"></a>LL_DMA_SetChannelPriorityLevel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart.o(i.LL_DMA_SetChannelPriorityLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[86]"></a>LL_DMA_SetDataTransferDirection</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart.o(i.LL_DMA_SetDataTransferDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetDataTransferDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[8a]"></a>LL_DMA_SetMemoryIncMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart.o(i.LL_DMA_SetMemoryIncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMemoryIncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[8c]"></a>LL_DMA_SetMemorySize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart.o(i.LL_DMA_SetMemorySize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMemorySize
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[88]"></a>LL_DMA_SetMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart.o(i.LL_DMA_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[89]"></a>LL_DMA_SetPeriphIncMode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart.o(i.LL_DMA_SetPeriphIncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetPeriphIncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[85]"></a>LL_DMA_SetPeriphRequest</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart.o(i.LL_DMA_SetPeriphRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetPeriphRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[8b]"></a>LL_DMA_SetPeriphSize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart.o(i.LL_DMA_SetPeriphSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetPeriphSize
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[74]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[75]"></a>LL_RCC_IsActiveFlag_HSIDIV</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.LL_RCC_IsActiveFlag_HSIDIV))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[72]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.RCC_GetHCLKClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[73]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.RCC_GetPCLK1ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[71]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32l0xx_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetSystemClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_HSIDIV
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[6d]"></a>LL_RCC_SetLPTIMClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_ll_lptim.o(i.LL_RCC_SetLPTIMClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPTIM_Disable
</UL>

<P><STRONG><a name="[78]"></a>LL_RTC_DATE_Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_DATE_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RTC_DATE_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[7c]"></a>LL_RTC_TIME_Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_TIME_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RTC_TIME_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
</UL>

<P><STRONG><a name="[46]"></a>LL_I2C_SetTransferRequest</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bma253_iic.o(i.LL_I2C_SetTransferRequest))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_WriteByte
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadNBytes
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadByte
</UL>

<P><STRONG><a name="[47]"></a>LL_I2C_SetTransferSize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bma253_iic.o(i.LL_I2C_SetTransferSize))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_WriteByte
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadNBytes
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadByte
</UL>

<P><STRONG><a name="[44]"></a>BMA253_SetParameter</STRONG> (Thumb, 618 bytes, Stack size 56 bytes, bma253.o(i.BMA253_SetParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = BMA253_SetParameter &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_soft_reset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_set_sleep_timer_mode
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_set_sleep_durn
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_rst_intr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_range_set
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_range_get
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_probe
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_power_mode_set
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_power_mode_get
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_out_ctrl_get
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_out_ctrl
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_mode_set
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_mode_get
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_map_to_pin1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_enable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_get_sleep_timer_mode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_get_sleep_durn
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_filter_bandwidth_set
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_filter_bandwidth_get
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_fifo_watermark_level_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_fifo_watermark_level_get
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_fifo_mode_set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_fifo_mode_get
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_Init
</UL>

<P><STRONG><a name="[9d]"></a>bma253_read_byte</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bma253.o(i.bma253_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bma253_read_byte &rArr; BMA253_ReadByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_set_sleep_timer_mode
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_set_sleep_durn
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_rst_intr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_range_get
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_probe
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_power_mode_set
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_power_mode_get
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_out_ctrl_get
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_out_ctrl
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_mode_get
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_map_to_pin1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_enable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_get_sleep_timer_mode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_get_sleep_durn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_filter_bandwidth_get
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_fifo_watermark_level_get
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_fifo_mode_get
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_accel_get
</UL>

<P><STRONG><a name="[9e]"></a>bma253_write_byte</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bma253.o(i.bma253_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bma253_write_byte &rArr; BMA253_WriteByte &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_soft_reset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_set_sleep_timer_mode
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_set_sleep_durn
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_rst_intr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_range_set
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_power_mode_set
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_out_ctrl
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_mode_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_map_to_pin1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_enable
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_filter_bandwidth_set
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_fifo_watermark_level_set
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_fifo_mode_set
</UL>

<P><STRONG><a name="[a1]"></a>ee_number</STRONG> (Thumb, 254 bytes, Stack size 120 bytes, tiny_vsnprintf.o(i.ee_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ee_number
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
</UL>

<P><STRONG><a name="[3d]"></a>AccelFilter</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, step_process.o(i.AccelFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AccelFilter &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepThread
</UL>

<P><STRONG><a name="[3f]"></a>AccelHandle</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, step_process.o(i.AccelHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AccelHandle &rArr; StepThread &rArr; CalcZ &rArr; FindMinInt
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepThread
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_TaskStep
</UL>

<P><STRONG><a name="[62]"></a>CalcX</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, step_process.o(i.CalcX))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CalcX &rArr; FindMinInt
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMinInt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMaxInt
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepThread
</UL>

<P><STRONG><a name="[65]"></a>CalcY</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, step_process.o(i.CalcY))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CalcY &rArr; FindMinInt
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMinInt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMaxInt
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepThread
</UL>

<P><STRONG><a name="[66]"></a>CalcZ</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, step_process.o(i.CalcZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CalcZ &rArr; FindMinInt
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMinInt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindMaxInt
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepThread
</UL>

<P><STRONG><a name="[63]"></a>FindMaxInt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, step_process.o(i.FindMaxInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FindMaxInt
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcZ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcY
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcX
</UL>

<P><STRONG><a name="[64]"></a>FindMinInt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, step_process.o(i.FindMinInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FindMinInt
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcZ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcY
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcX
</UL>

<P><STRONG><a name="[8e]"></a>ReadFifoData</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, step_process.o(i.ReadFifoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ReadFifoData &rArr; accelerometer_fifo_data_read &rArr; BMA253_ReadNBytes &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_fifo_data_read
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_TaskStep
</UL>

<P><STRONG><a name="[40]"></a>StepThread</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, step_process.o(i.StepThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StepThread &rArr; CalcZ &rArr; FindMinInt
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcZ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcY
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcX
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelHandle
</UL>

<P><STRONG><a name="[92]"></a>TaskStepClearCountdown</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, step_process.o(i.TaskStepClearCountdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TaskStepClearCountdown &rArr; LL_LPTIM_Disable &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPTIM_Disable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set32HzFlag
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get32HzFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_TaskStep
</UL>

<P><STRONG><a name="[91]"></a>UploadPedometer</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, step_process.o(i.UploadPedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = UploadPedometer &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPTIM1_Init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM1_CounterStartIT
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_TaskStep
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
