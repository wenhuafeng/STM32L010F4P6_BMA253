<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32L0_BMA253\STM32L0_BMA253.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32L0_BMA253\STM32L0_BMA253.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Thu Sep 17 18:52:42 2020
<BR><P>
<H3>Maximum Stack Usage =        164 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MX_LPUART1_UART_Init_1 &rArr; LL_LPUART_Init &rArr; LL_RCC_GetLPUARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from stm32l0xx_it.o(i.DMA1_Channel2_3_IRQHandler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[f]">DMA1_Channel4_5_IRQHandler</a> from stm32l0xx_it.o(i.DMA1_Channel4_5_IRQHandler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from stm32l0xx_it.o(i.EXTI2_3_IRQHandler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l0xx_it.o(i.HardFault_Handler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[14]">I2C1_IRQHandler</a> from stm32l0xx_it.o(i.I2C1_IRQHandler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[11]">LPTIM1_IRQHandler</a> from stm32l0xx_it.o(i.LPTIM1_IRQHandler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[17]">LPUART1_IRQHandler</a> from stm32l0xx_it.o(i.LPUART1_IRQHandler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l0xx_it.o(i.NMI_Handler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32l0xx_it.o(i.PendSV_Handler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[15]">SPI1_IRQHandler</a> from stm32l0xx_it.o(i.SPI1_IRQHandler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32l0xx_it.o(i.SVC_Handler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32l0xx_it.o(i.SysTick_Handler) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[19]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l010x4.o(.text)
 <LI><a href="#[13]">TIM21_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[12]">TIM2_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[16]">USART2_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32l010x4.o(.text) referenced from startup_stm32l010x4.o(RESET)
 <LI><a href="#[1a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l010x4.o(.text)
 <LI><a href="#[18]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[23]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[c3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[c4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[c5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[c6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010x4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[1d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_Init
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_map_to_pin1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_enable
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init_1
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[25]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_command_process
</UL>

<P><STRONG><a name="[1f]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[cd]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[ce]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[cf]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>AT_command_process</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, gsensortosflash_process.o(i.AT_command_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AT_command_process &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_EnableDMAReq_TX
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_TogglePin
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsensorToSflash_Process
</UL>

<P><STRONG><a name="[2b]"></a>AccelerometerDataGet</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, gsensortosflash_process.o(i.AccelerometerDataGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AccelerometerDataGet &rArr; accelerometer_accel_get &rArr; BMA253_read_byte &rArr; BMA253_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataEnterQueue
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_accel_get
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsensorToSflash_Process
</UL>

<P><STRONG><a name="[2e]"></a>BMA253_I2C_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, accelerometer_bma253_iic.o(i.BMA253_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = BMA253_I2C_Init &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStopCondition
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>BMA253_ReadByte</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, accelerometer_bma253_iic.o(i.BMA253_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BMA253_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_TransmitData8
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetTransferSize
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetTransferRequest
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetSlaveAddr
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_TXE
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_TC
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_RXNE
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStopCondition
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStartCondition
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Enable
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_read_byte
</UL>

<P><STRONG><a name="[3c]"></a>BMA253_WriteByte</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, accelerometer_bma253_iic.o(i.BMA253_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BMA253_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_TransmitData8
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetTransferSize
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetTransferRequest
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetSlaveAddr
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_TXE
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_TC
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStopCondition
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStartCondition
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Enable
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_write_byte
</UL>

<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.DMA1_Channel2_3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.DMA1_Channel4_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_Channel4_5_IRQHandler &rArr; DMA_ISR_Callback &rArr; LL_DMA_SetDataLength
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ISR_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA_ISR_Callback</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, gsensortosflash_process.o(i.DMA_ISR_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_ISR_Callback &rArr; LL_DMA_SetDataLength
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_5_IRQHandler
</UL>

<P><STRONG><a name="[2d]"></a>DataEnterQueue</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gsensortosflash_process.o(i.DataEnterQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DataEnterQueue &rArr; EnQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueToBuffer
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueue
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelerometerDataGet
</UL>

<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.EXTI2_3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EnQueue</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, arrayqueue.o(i.EnQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EnQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isFull
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataEnterQueue
</UL>

<P><STRONG><a name="[91]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[48]"></a>GsensorToSflash_Process</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gsensortosflash_process.o(i.GsensorToSflash_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GsensorToSflash_Process &rArr; AccelerometerDataGet &rArr; accelerometer_accel_get &rArr; BMA253_read_byte &rArr; BMA253_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToSflash
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPowerDetect
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelerometerDataGet
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_command_process
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.I2C1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>InitQueue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arrayqueue.o(i.InitQueue))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataEnterQueue
</UL>

<P><STRONG><a name="[4b]"></a>LL_EXTI_Init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32l0xx_ll_exti.o(i.LL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableRisingTrig_0_31
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableIT_0_31
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableFallingTrig_0_31
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableEvent_0_31
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableIT_0_31
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableEvent_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[76]"></a>LL_GPIO_Init</STRONG> (Thumb, 254 bytes, Stack size 20 bytes, stm32l0xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init_1
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[79]"></a>LL_I2C_Init</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, stm32l0xx_ll_i2c.o(i.LL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[52]"></a>LL_Init1msTick</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32l0xx_ll_utils.o(i.LL_Init1msTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_Init1msTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[54]"></a>LL_LPUART_Init</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32l0xx_ll_lpuart.o(i.LL_LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LL_LPUART_Init &rArr; LL_RCC_GetLPUARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init_1
</UL>

<P><STRONG><a name="[55]"></a>LL_RCC_GetLPUARTClockFreq</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stm32l0xx_ll_rcc.o(i.LL_RCC_GetLPUARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LL_RCC_GetLPUARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_HSIDIV
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_Init
</UL>

<P><STRONG><a name="[5d]"></a>LL_RTC_DATE_Init</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_DATE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_RTC_DATE_Init &rArr; LL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_IsShadowRegBypassEnabled
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnableWriteProtection
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableWriteProtection
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableInitMode
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Config
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[5f]"></a>LL_RTC_EnterInitMode</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSTICK_IsActiveCounterFlag
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_IsActiveFlag_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[67]"></a>LL_RTC_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_RTC_Init &rArr; LL_RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnableWriteProtection
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableWriteProtection
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[68]"></a>LL_RTC_TIME_Init</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_TIME_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_RTC_TIME_Init &rArr; LL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_IsShadowRegBypassEnabled
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_GetHourFormat
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnableWriteProtection
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableWriteProtection
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DisableInitMode
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[63]"></a>LL_RTC_WaitForSynchro</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSTICK_IsActiveCounterFlag
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_IsActiveFlag_RS
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[8c]"></a>LL_SPI_Init</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, stm32l0xx_ll_spi.o(i.LL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[a6]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_ll_utils.o(i.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[bf]"></a>LL_mDelay</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32l0xx_ll_utils.o(i.LL_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_power_mode_set
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>LPTIM1_Counter_Start_IT</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, lptim.o(i.LPTIM1_Counter_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.LPTIM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPTIM1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_TimeHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LPUART1_IRQHandler &rArr; LPUART_RxIdleCallback &rArr; LL_DMA_SetDataLength
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_RxIdleCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>LPUART_DMA_CONFIG</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, gsensortosflash_process.o(i.LPUART_DMA_CONFIG))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LPUART_DMA_CONFIG &rArr; LL_DMA_SetDataLength
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphAddress
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryAddress
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>LPUART_RxIdleCallback</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gsensortosflash_process.o(i.LPUART_RxIdleCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LPUART_RxIdleCallback &rArr; LL_DMA_SetDataLength
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataLength
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_EnableChannel
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>LP_TimeHandle</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, gsensortosflash_process.o(i.LP_TimeHandle))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM1_IRQHandler
</UL>

<P><STRONG><a name="[49]"></a>LowPowerDetect</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, gsensortosflash_process.o(i.LowPowerDetect))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsensorToSflash_Process
</UL>

<P><STRONG><a name="[70]"></a>MX_DMA_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_DMA_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>MX_GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MX_GPIO_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>MX_I2C1_Init</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, i2c.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MX_I2C1_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_I2C_Init
</UL>

<P><STRONG><a name="[7a]"></a>MX_LPTIM1_Init</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, lptim.o(i.MX_LPTIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_LPTIM1_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>MX_LPUART1_UART_Init_1</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, usart.o(i.MX_LPUART1_UART_Init_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MX_LPUART1_UART_Init_1 &rArr; LL_LPUART_Init &rArr; LL_RCC_GetLPUARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphSize
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphIncMode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemorySize
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetMemoryIncMode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetDataTransferDirection
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelPriorityLevel
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>MX_RTC_Init</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_RTC_Init &rArr; LL_RTC_TIME_Init &rArr; LL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>MX_SPI1_Init</STRONG> (Thumb, 246 bytes, Stack size 72 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MX_SPI1_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>QueueToBuffer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, arrayqueue.o(i.QueueToBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataEnterQueue
</UL>

<P><STRONG><a name="[5b]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.RCC_GetHCLKClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[5c]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.RCC_GetPCLK1ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[57]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32l0xx_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRange
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_HSIDIV
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[8e]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32l0xx_ll_rcc.o(i.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_HSIDIV
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[15]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, w25q128.o(i.SPI1_ReadWriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>SystemClock_Config_1</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, main.o(i.SystemClock_Config_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemClock_Config_1 &rArr; LL_Init1msTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetSysClkSource
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRTCClockSource
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetLPUARTClockSource
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetLPTIMClockSource
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetI2CClockSource
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB2Prescaler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB1Prescaler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAHBPrescaler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_ReleaseBackupDomainReset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_IsReady
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_Enable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_ConfigDomain_SYS
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_SetDriveCapability
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_Enable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_SetCalibTrimming
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_Enable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_ForceBackupDomainReset
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_EnableRTC
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SetRegulVoltageScaling
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnableBkUpAccess
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_SetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010x4.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>W25QXX_CS</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, w25q128.o(i.W25QXX_CS))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
</UL>

<P><STRONG><a name="[26]"></a>W25QXX_Erase_Chip</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, w25q128.o(i.W25QXX_Erase_Chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = W25QXX_Erase_Chip &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_CS
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_command_process
</UL>

<P><STRONG><a name="[ae]"></a>W25QXX_Init</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, w25q128.o(i.W25QXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = W25QXX_Init &rArr; W25QXX_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>W25QXX_Read</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, w25q128.o(i.W25QXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_CS
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_command_process
</UL>

<P><STRONG><a name="[af]"></a>W25QXX_ReadID</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, w25q128.o(i.W25QXX_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = W25QXX_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_CS
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[b0]"></a>W25QXX_ReadSR</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, w25q128.o(i.W25QXX_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_CS
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[ab]"></a>W25QXX_Wait_Busy</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, w25q128.o(i.W25QXX_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>

<P><STRONG><a name="[aa]"></a>W25QXX_Write_Enable</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, w25q128.o(i.W25QXX_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = W25QXX_Write_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_CS
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>

<P><STRONG><a name="[b1]"></a>W25QXX_Write_NoCheck</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, w25q128.o(i.W25QXX_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToSflash
</UL>

<P><STRONG><a name="[b2]"></a>W25QXX_Write_Page</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, w25q128.o(i.W25QXX_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_CS
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
</UL>

<P><STRONG><a name="[4a]"></a>WriteDataToSflash</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, gsensortosflash_process.o(i.WriteDataToSflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = WriteDataToSflash &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsensorToSflash_Process
</UL>

<P><STRONG><a name="[56]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stm32l0xx_ll_lpuart.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_Init
</UL>

<P><STRONG><a name="[be]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, accelerometer_bma253.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_power_mode_set
</UL>

<P><STRONG><a name="[d0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[d1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[d2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2c]"></a>accelerometer_accel_get</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, accelerometer_bma253.o(i.accelerometer_accel_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = accelerometer_accel_get &rArr; BMA253_read_byte &rArr; BMA253_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelerometerDataGet
</UL>

<P><STRONG><a name="[b3]"></a>accelerometer_filter_bandwidth_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, accelerometer_bma253.o(i.accelerometer_filter_bandwidth_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = accelerometer_filter_bandwidth_set &rArr; BMA253_write_byte &rArr; BMA253_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_init
</UL>

<P><STRONG><a name="[b4]"></a>accelerometer_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, accelerometer_bma253.o(i.accelerometer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = accelerometer_init &rArr; accelerometer_int_map_to_pin1 &rArr; BMA253_write_byte &rArr; BMA253_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_soft_reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_range_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_probe
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_power_mode_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_out_ctrl
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_mode_set
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_map_to_pin1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_enable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_filter_bandwidth_set
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>accelerometer_int_enable</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, accelerometer_bma253.o(i.accelerometer_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = accelerometer_int_enable &rArr; BMA253_write_byte &rArr; BMA253_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_write_byte
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_read_byte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_init
</UL>

<P><STRONG><a name="[bc]"></a>accelerometer_int_map_to_pin1</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, accelerometer_bma253.o(i.accelerometer_int_map_to_pin1))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = accelerometer_int_map_to_pin1 &rArr; BMA253_write_byte &rArr; BMA253_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_write_byte
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_read_byte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_init
</UL>

<P><STRONG><a name="[b9]"></a>accelerometer_int_mode_set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, accelerometer_bma253.o(i.accelerometer_int_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = accelerometer_int_mode_set &rArr; BMA253_write_byte &rArr; BMA253_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_init
</UL>

<P><STRONG><a name="[ba]"></a>accelerometer_int_out_ctrl</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, accelerometer_bma253.o(i.accelerometer_int_out_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = accelerometer_int_out_ctrl &rArr; BMA253_write_byte &rArr; BMA253_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_write_byte
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_init
</UL>

<P><STRONG><a name="[b6]"></a>accelerometer_power_mode_set</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, accelerometer_bma253.o(i.accelerometer_power_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = accelerometer_power_mode_set &rArr; BMA253_write_byte &rArr; BMA253_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_init
</UL>

<P><STRONG><a name="[b5]"></a>accelerometer_probe</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, accelerometer_bma253.o(i.accelerometer_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = accelerometer_probe &rArr; BMA253_read_byte &rArr; BMA253_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_init
</UL>

<P><STRONG><a name="[b8]"></a>accelerometer_range_set</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, accelerometer_bma253.o(i.accelerometer_range_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = accelerometer_range_set &rArr; BMA253_write_byte &rArr; BMA253_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_init
</UL>

<P><STRONG><a name="[b7]"></a>accelerometer_soft_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, accelerometer_bma253.o(i.accelerometer_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = accelerometer_soft_reset &rArr; BMA253_write_byte &rArr; BMA253_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>isFull</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, arrayqueue.o(i.isFull))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueue
</UL>

<P><STRONG><a name="[18]"></a>main</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = main &rArr; MX_LPUART1_UART_Init_1 &rArr; LL_LPUART_Init &rArr; LL_RCC_GetLPUARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_DMA_CONFIG
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsensorToSflash_Process
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_I2C_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_soft_reset
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init_1
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPTIM1_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM1_Counter_Start_IT
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3d]"></a>BMA253_read_byte</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, accelerometer_bma253.o(i.BMA253_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BMA253_read_byte &rArr; BMA253_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_probe
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_out_ctrl
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_map_to_pin1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_enable
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_accel_get
</UL>

<P><STRONG><a name="[3e]"></a>BMA253_write_byte</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, accelerometer_bma253.o(i.BMA253_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BMA253_write_byte &rArr; BMA253_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_soft_reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_range_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_power_mode_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_out_ctrl
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_mode_set
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_map_to_pin1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_int_enable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelerometer_filter_bandwidth_set
</UL>

<P><STRONG><a name="[30]"></a>LL_I2C_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, accelerometer_bma253_iic.o(i.LL_I2C_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_I2C_Init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_WriteByte
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadByte
</UL>

<P><STRONG><a name="[33]"></a>LL_I2C_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, accelerometer_bma253_iic.o(i.LL_I2C_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_WriteByte
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadByte
</UL>

<P><STRONG><a name="[37]"></a>LL_I2C_GenerateStartCondition</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, accelerometer_bma253_iic.o(i.LL_I2C_GenerateStartCondition))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_WriteByte
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadByte
</UL>

<P><STRONG><a name="[31]"></a>LL_I2C_GenerateStopCondition</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, accelerometer_bma253_iic.o(i.LL_I2C_GenerateStopCondition))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_I2C_Init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_WriteByte
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadByte
</UL>

<P><STRONG><a name="[3b]"></a>LL_I2C_IsActiveFlag_RXNE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, accelerometer_bma253_iic.o(i.LL_I2C_IsActiveFlag_RXNE))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadByte
</UL>

<P><STRONG><a name="[3a]"></a>LL_I2C_IsActiveFlag_TC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, accelerometer_bma253_iic.o(i.LL_I2C_IsActiveFlag_TC))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_WriteByte
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadByte
</UL>

<P><STRONG><a name="[38]"></a>LL_I2C_IsActiveFlag_TXE</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, accelerometer_bma253_iic.o(i.LL_I2C_IsActiveFlag_TXE))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_WriteByte
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadByte
</UL>

<P><STRONG><a name="[34]"></a>LL_I2C_SetSlaveAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, accelerometer_bma253_iic.o(i.LL_I2C_SetSlaveAddr))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_WriteByte
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadByte
</UL>

<P><STRONG><a name="[35]"></a>LL_I2C_SetTransferRequest</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, accelerometer_bma253_iic.o(i.LL_I2C_SetTransferRequest))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_WriteByte
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadByte
</UL>

<P><STRONG><a name="[36]"></a>LL_I2C_SetTransferSize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, accelerometer_bma253_iic.o(i.LL_I2C_SetTransferSize))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_WriteByte
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadByte
</UL>

<P><STRONG><a name="[39]"></a>LL_I2C_TransmitData8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, accelerometer_bma253_iic.o(i.LL_I2C_TransmitData8))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_WriteByte
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMA253_ReadByte
</UL>

<P><STRONG><a name="[40]"></a>LL_DMA_DisableChannel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gsensortosflash_process.o(i.LL_DMA_DisableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_RxIdleCallback
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ISR_Callback
</UL>

<P><STRONG><a name="[43]"></a>LL_DMA_EnableChannel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gsensortosflash_process.o(i.LL_DMA_EnableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_RxIdleCallback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_DMA_CONFIG
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ISR_Callback
</UL>

<P><STRONG><a name="[42]"></a>LL_DMA_SetDataLength</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gsensortosflash_process.o(i.LL_DMA_SetDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetDataLength
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_RxIdleCallback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_DMA_CONFIG
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ISR_Callback
</UL>

<P><STRONG><a name="[41]"></a>LL_DMA_SetMemoryAddress</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gsensortosflash_process.o(i.LL_DMA_SetMemoryAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetMemoryAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_DMA_CONFIG
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ISR_Callback
</UL>

<P><STRONG><a name="[6f]"></a>LL_DMA_SetPeriphAddress</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gsensortosflash_process.o(i.LL_DMA_SetPeriphAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetPeriphAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_DMA_CONFIG
</UL>

<P><STRONG><a name="[28]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gsensortosflash_process.o(i.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_command_process
</UL>

<P><STRONG><a name="[27]"></a>LL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gsensortosflash_process.o(i.LL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToSflash
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_command_process
</UL>

<P><STRONG><a name="[2a]"></a>LL_LPUART_EnableDMAReq_TX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gsensortosflash_process.o(i.LL_LPUART_EnableDMAReq_TX))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_command_process
</UL>

<P><STRONG><a name="[90]"></a>LL_FLASH_SetLatency</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.LL_FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[96]"></a>LL_PWR_EnableBkUpAccess</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.LL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[92]"></a>LL_PWR_SetRegulVoltageScaling</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.LL_PWR_SetRegulVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[9d]"></a>LL_RCC_EnableRTC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.LL_RCC_EnableRTC))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[97]"></a>LL_RCC_ForceBackupDomainReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.LL_RCC_ForceBackupDomainReset))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[a5]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[93]"></a>LL_RCC_HSI_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.LL_RCC_HSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[94]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[95]"></a>LL_RCC_HSI_SetCalibTrimming</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.LL_RCC_HSI_SetCalibTrimming))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[9a]"></a>LL_RCC_LSE_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.LL_RCC_LSE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[9b]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[99]"></a>LL_RCC_LSE_SetDriveCapability</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.LL_RCC_LSE_SetDriveCapability))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[9e]"></a>LL_RCC_PLL_ConfigDomain_SYS</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.LL_RCC_PLL_ConfigDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_PLL_ConfigDomain_SYS
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[9f]"></a>LL_RCC_PLL_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.LL_RCC_PLL_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[a0]"></a>LL_RCC_PLL_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.LL_RCC_PLL_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[98]"></a>LL_RCC_ReleaseBackupDomainReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.LL_RCC_ReleaseBackupDomainReset))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[a1]"></a>LL_RCC_SetAHBPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.LL_RCC_SetAHBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[a2]"></a>LL_RCC_SetAPB1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.LL_RCC_SetAPB1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[a3]"></a>LL_RCC_SetAPB2Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.LL_RCC_SetAPB2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[a8]"></a>LL_RCC_SetI2CClockSource</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.LL_RCC_SetI2CClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[a9]"></a>LL_RCC_SetLPTIMClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.LL_RCC_SetLPTIMClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[a7]"></a>LL_RCC_SetLPUARTClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.LL_RCC_SetLPUARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[9c]"></a>LL_RCC_SetRTCClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.LL_RCC_SetRTCClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[a4]"></a>LL_RCC_SetSysClkSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.LL_RCC_SetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config_1
</UL>

<P><STRONG><a name="[72]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dma.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[71]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, dma.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[75]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio.o(i.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[77]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, gpio.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[78]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, i2c.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[7b]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lptim.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPTIM1_Init
</UL>

<P><STRONG><a name="[7d]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart.o(i.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init_1
</UL>

<P><STRONG><a name="[81]"></a>LL_DMA_SetChannelPriorityLevel</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, usart.o(i.LL_DMA_SetChannelPriorityLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetChannelPriorityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init_1
</UL>

<P><STRONG><a name="[80]"></a>LL_DMA_SetDataTransferDirection</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, usart.o(i.LL_DMA_SetDataTransferDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetDataTransferDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init_1
</UL>

<P><STRONG><a name="[84]"></a>LL_DMA_SetMemoryIncMode</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, usart.o(i.LL_DMA_SetMemoryIncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetMemoryIncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init_1
</UL>

<P><STRONG><a name="[86]"></a>LL_DMA_SetMemorySize</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, usart.o(i.LL_DMA_SetMemorySize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetMemorySize
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init_1
</UL>

<P><STRONG><a name="[82]"></a>LL_DMA_SetMode</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, usart.o(i.LL_DMA_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init_1
</UL>

<P><STRONG><a name="[83]"></a>LL_DMA_SetPeriphIncMode</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, usart.o(i.LL_DMA_SetPeriphIncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetPeriphIncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init_1
</UL>

<P><STRONG><a name="[7f]"></a>LL_DMA_SetPeriphRequest</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, usart.o(i.LL_DMA_SetPeriphRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetPeriphRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init_1
</UL>

<P><STRONG><a name="[85]"></a>LL_DMA_SetPeriphSize</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, usart.o(i.LL_DMA_SetPeriphSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetPeriphSize
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init_1
</UL>

<P><STRONG><a name="[7e]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart.o(i.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init_1
</UL>

<P><STRONG><a name="[88]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init_1
</UL>

<P><STRONG><a name="[87]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, usart.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init_1
</UL>

<P><STRONG><a name="[8b]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, spi.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[58]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[59]"></a>LL_RCC_IsActiveFlag_HSIDIV</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.LL_RCC_IsActiveFlag_HSIDIV))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[5a]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[8d]"></a>LL_RCC_MSI_GetRange</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.LL_RCC_MSI_GetRange))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[4c]"></a>LL_EXTI_DisableEvent_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_exti.o(i.LL_EXTI_DisableEvent_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[4e]"></a>LL_EXTI_DisableIT_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_exti.o(i.LL_EXTI_DisableIT_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[4f]"></a>LL_EXTI_EnableEvent_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_exti.o(i.LL_EXTI_EnableEvent_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[51]"></a>LL_EXTI_EnableFallingTrig_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_exti.o(i.LL_EXTI_EnableFallingTrig_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[4d]"></a>LL_EXTI_EnableIT_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_exti.o(i.LL_EXTI_EnableIT_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[50]"></a>LL_EXTI_EnableRisingTrig_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_exti.o(i.LL_EXTI_EnableRisingTrig_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[60]"></a>LL_RTC_DATE_Config</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_DATE_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_RTC_DATE_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[61]"></a>LL_RTC_DisableInitMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_DisableInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[5e]"></a>LL_RTC_DisableWriteProtection</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_DisableWriteProtection))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[64]"></a>LL_RTC_EnableWriteProtection</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_EnableWriteProtection))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[69]"></a>LL_RTC_GetHourFormat</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_GetHourFormat))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
</UL>

<P><STRONG><a name="[65]"></a>LL_RTC_IsActiveFlag_INIT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_IsActiveFlag_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
</UL>

<P><STRONG><a name="[6b]"></a>LL_RTC_IsActiveFlag_RS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_IsActiveFlag_RS))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[62]"></a>LL_RTC_IsShadowRegBypassEnabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_IsShadowRegBypassEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_DATE_Init
</UL>

<P><STRONG><a name="[6a]"></a>LL_RTC_TIME_Config</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, stm32l0xx_ll_rtc.o(i.LL_RTC_TIME_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_RTC_TIME_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_TIME_Init
</UL>

<P><STRONG><a name="[66]"></a>LL_SYSTICK_IsActiveCounterFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_ll_rtc.o(i.LL_SYSTICK_IsActiveCounterFlag))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_WaitForSynchro
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RTC_EnterInitMode
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
